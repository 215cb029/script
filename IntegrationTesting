package com.flipkart.dart.relayer.kafka.partitioner;


import com.flipkart.bigfoot.org.apache.kafka.clients.admin.AdminClient;
import com.flipkart.bigfoot.org.apache.kafka.clients.admin.AdminClientConfig;
import com.flipkart.bigfoot.org.apache.kafka.clients.admin.DescribeTopicsResult;
import com.flipkart.bigfoot.org.apache.kafka.clients.admin.TopicDescription;

import org.apache.kafka.common.Cluster;
import org.apache.kafka.common.Node;
import org.apache.kafka.common.PartitionInfo;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import org.junit.Before;
import org.junit.Test;

import java.util.*;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;

public class DartLingerMsBasedCustomPartitionerIntegrationTest {

    Cluster cluster;
    @Before
    public void init(){
        String bootstrapServers = "10.67.114.118:9092";

        Properties props = new Properties();
        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);

        try  {
            AdminClient adminClient = AdminClient.create(props);
            // Get all topic names
            Set<String> topics = adminClient.listTopics().names().get();

            List l=new ArrayList<>() ;
            l.add("test.kafka");
            DescribeTopicsResult describeTopicsResult =adminClient.describeTopics(topics);

            Map<String, TopicDescription> descriptions = describeTopicsResult.all().get();

            // Collect all brokers
            Set<Node> brokers = descriptions.values().stream()
                    .flatMap(td -> td.partitions().stream())
                    .flatMap(p -> {
                        List<Node> nodes = new ArrayList<>();
                        if (p.leader() != null){
                            Node node=new Node(p.leader().id(),p.leader().host(),p.leader().port());
                            nodes.add(node);
                        }
                        nodes.addAll(p.replicas().stream().map(r -> new Node(r.id(),r.host(),r.port())).collect(Collectors.toList()));
                        return nodes.stream();
                    })
                    .collect(Collectors.toSet());

            // Build PartitionInfo for each topic
            Map<String, List<PartitionInfo>> topicPartitionInfos = new HashMap<>();
            for (Map.Entry<String, TopicDescription> entry : descriptions.entrySet()) {
                String topic = entry.getKey();
                TopicDescription desc = entry.getValue();

                List<PartitionInfo> partitions = desc.partitions().stream()
                        .map(p -> new PartitionInfo(
                                topic,
                                p.partition(),
                                p.leader()==null?null:
                                        new Node(p.leader().id(),p.leader().host(),p.leader().port()),
                                p.replicas().stream().map(r -> new Node(r.id(),r.host(),r.port())).collect(Collectors.toList()).toArray(new Node[0]),
                                p.isr().stream().map(r -> new Node(r.id(),r.host(),r.port())).collect(Collectors.toList()).toArray(new Node[0])
                        ))
                        .collect(Collectors.toList());

                topicPartitionInfos.put(topic, partitions);
            }
            List partitionInfoList =topicPartitionInfos.values().stream()
                    .flatMap(List::stream)
                    .collect(Collectors.toList());
            // Construct Cluster object
            cluster = new Cluster(brokers,partitionInfoList,new HashSet<>());
            // Pass to your utility method
        } catch (ExecutionException e) {
            throw new RuntimeException(e);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }
    @Test
    public void testPartitionMethodWithExistingTopic()  {
        DartLingerMsBasedCustomPartitioner dartLingerMsBasedCustomPartitioner=new DartLingerMsBasedCustomPartitioner();

        int partition=dartLingerMsBasedCustomPartitioner.partition("test.kafka",null,null,null,null,cluster);
        assertNotNull(partition, "Partition should not be null");

    }
    @Test(expected = NullPointerException.class)
    public void testPartitionMethodWithoutExistingTopic()  {
        DartLingerMsBasedCustomPartitioner dartLingerMsBasedCustomPartitioner=new DartLingerMsBasedCustomPartitioner();

        int partition=dartLingerMsBasedCustomPartitioner.partition("xyzTopic",null,null,null,null,cluster);

    }
}






