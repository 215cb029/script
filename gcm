from google.cloud import monitoring_v3
from datetime import datetime, timedelta
import pytz

# Set your project ID
project_id = "fkp-specter-pubsub"
client = monitoring_v3.MetricServiceClient()
project_name = f"projects/{project_id}"

# Define time interval (last 5 minutes)
end_time = datetime.utcnow().replace(tzinfo=pytz.UTC)
start_time = end_time - timedelta(minutes=5)

interval = monitoring_v3.TimeInterval({
    "end_time": {"seconds": int(end_time.timestamp())},
    "start_time": {"seconds": int(start_time.timestamp())},
})

# Define aggregation: 1-minute alignment, align to rate
aggregation = monitoring_v3.Aggregation({
    "alignment_period": {"seconds": 60},
    "per_series_aligner": monitoring_v3.Aggregation.Aligner.ALIGN_RATE,
    "cross_series_reducer": monitoring_v3.Aggregation.Reducer.REDUCE_NONE,
})

# Define the metric type
metric_type = "pubsub.googleapis.com/topic/byte_cost"

results = []

# Make the request
for time_series in client.list_time_series(
    request={
        "name": project_name,
        "filter": f'metric.type = "{metric_type}"',
        "interval": interval,
        "aggregation": aggregation,
        "view": monitoring_v3.ListTimeSeriesRequest.TimeSeriesView.FULL,
    }
):
    values = [point.value.double_value for point in time_series.points]
    if values:
        max_val = max(values)
        min_val = min(values)
        mean_val = sum(values) / len(values)
        resource_labels = time_series.resource.labels
        metric_labels = time_series.metric.labels
        results.append({
            "resource": resource_labels,
            "metric_labels": metric_labels,
            "max": max_val,
            "min": min_val,
            "mean": mean_val,
        })

# Print results
for r in results:
    print(f"\nResource: {r['resource']}")
    print(f"Metric Labels: {r['metric_labels']}")
    print(f"Max: {r['max']:.2f} B/s")
    print(f"Min: {r['min']:.2f} B/s")
    print(f"Mean: {r['mean']:.2f} B/s")
